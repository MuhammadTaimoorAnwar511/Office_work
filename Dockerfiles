# Stage 1: Build the React application
FROM node:18-alpine as builder
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . ./ 
RUN npm run build

# Stage 2: Serve the application using serve
FROM node:18-alpine
WORKDIR /app
COPY --from=builder /app/build ./
RUN npm install -g serve
EXPOSE <3000>
CMD ["serve", "-s", ".", "-l", "<3000>"]

===
BACKEND
===
# Use official Node image
FROM node:18-alpine
# Create app directory
WORKDIR /usr/src/app
# Install app dependencies
COPY package*.json ./
RUN npm install
# Bundle app source
COPY . .
# Expose the port your app runs on
EXPOSE <5000>
# Command to run your app
CMD [ "node", "<server.js>" ]
===
COMPOSE
===
version: '3.8'

services:
  user-service:
    image: nauman920/user-service-be:latest
    container_name: user-service-be
    networks:
         - micro-service
    ports:
      - "5001:5001"
    restart: unless-stopped
    working_dir: /usr/src/app

  product-service:
    image: nauman920/product-service-be:latest
    container_name: product-service-be
    networks:
         - micro-service
    ports:
      - "5002:5002"
    restart: unless-stopped
    working_dir: /usr/src/app
  frontend:
    image: nauman920/micro-service-frontend:latest
    container_name: frontend
    networks:
         - micro-service
    ports:
      - "3000:3000"
    restart: unless-stopped
    working_dir: /app


# Optional: Define a default network (Docker Compose does this automatically)
networks:
     micro-service:
===
COMPOSE which localy build images first
===
version: '3.8'

services:
  user-service:
    build:
      context: ./user-service
    container_name: user-service-be
    networks:
      - micro-service
    ports:
      - "5001:5001"
    restart: unless-stopped
    working_dir: /usr/src/app

  product-service:
    build:
      context: ./product-service
    container_name: product-service-be
    networks:
      - micro-service
    ports:
      - "5002:5002"
    restart: unless-stopped
    working_dir: /usr/src/app

  frontend:
    build:
      context: ./frontend
    container_name: frontend
    networks:
      - micro-service
    ports:
      - "3000:3000"
    restart: unless-stopped
    working_dir: /app

networks:
  micro-service:

